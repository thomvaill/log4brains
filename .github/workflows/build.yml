# Inspired from https://github.com/backstage/backstage/blob/master/.github/workflows/ci.yml. Thanks!
# See ci.yml for info on `quality` and `tests` stages
name: Build
on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths:
      - "packages/**"
      - ".github/workflows/build.yml"

defaults:
  run:
    shell: bash

jobs:
  quality:
    strategy:
      # We use a matrix even if it's not needed here to be able to re-use the same Yarn setup snippet everywhere
      matrix:
        os: [ubuntu-latest]
        node-version: [14.x]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      # Beginning of yarn setup [KEEP IN SYNC BETWEEN ALL WORKFLOWS] (copy/paste of ci.yml's snippet)
      - name: use node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: https://registry.npmjs.org/
      - name: cache all node_modules
        id: cache-modules
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-v${{ matrix.node-version }}-node_modules-${{ hashFiles('yarn.lock', '**/package.json') }}
      - name: find location of global yarn cache
        id: yarn-cache
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: cache global yarn cache
        uses: actions/cache@v2
        if: steps.cache-modules.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: yarn install
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile
      # End of yarn setup

      # TODO: make dev & test work without having to build everything (inspiration: https://github.com/Izhaki/mono.ts)
      - name: build
        run: yarn build

      - name: format
        run: yarn format

      - name: lint
        run: yarn lint

  tests:
    needs: quality
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [15.x, 14.x, 12.x]
        exclude: # these cases are tested after the release with E2E tests
          - os: windows-latest
            node-version: 15.x
          - os: windows-latest
            node-version: 12.x
          - os: macos-latest
            node-version: 15.x
          - os: macos-latest
            node-version: 12.x
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all history to make Jest snapshot tests work

      # Beginning of yarn setup [KEEP IN SYNC BETWEEN ALL WORKFLOWS] (copy/paste of ci.yml's snippet)
      - name: use node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: https://registry.npmjs.org/
      - name: cache all node_modules
        id: cache-modules
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-v${{ matrix.node-version }}-node_modules-${{ hashFiles('yarn.lock', '**/package.json') }}
      - name: find location of global yarn cache
        id: yarn-cache
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: cache global yarn cache
        uses: actions/cache@v2
        if: steps.cache-modules.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: yarn install
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile
      # End of yarn setup

      # We have to build all the packages before the tests
      # Because init-log4brains's integration tests use @log4brains/cli, which uses @log4brains/core
      # TODO: we should separate tests that require built packages of the others, to get a quicker feedback
      # Once it's done, we should add "yarn test" in each package's preVersion script
      - name: build
        run: |
          yarn build
          yarn link-cli
          echo "$(yarn global bin)" >> $GITHUB_PATH

      - name: test
        run: yarn test

      - name: E2E tests
        run: yarn e2e

  publish-pages:
    needs: tests
    strategy:
      # We use a matrix even if it's not needed here to be able to re-use the same Yarn setup snippet everywhere
      matrix:
        os: [ubuntu-latest]
        node-version: [14.x]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false # required by JamesIves/github-pages-deploy-action
          fetch-depth: 0 # required by Log4brains to work correctly (needs the whole Git history)

      # Beginning of yarn setup [KEEP IN SYNC BETWEEN ALL WORKFLOWS] (copy/paste of ci.yml's snippet)
      - name: use node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: https://registry.npmjs.org/
      - name: cache all node_modules
        id: cache-modules
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-v${{ matrix.node-version }}-node_modules-${{ hashFiles('yarn.lock', '**/package.json') }}
      - name: find location of global yarn cache
        id: yarn-cache
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: cache global yarn cache
        uses: actions/cache@v2
        if: steps.cache-modules.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: yarn install
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile
      # End of yarn setup

      - name: build
        run: |
          yarn build
          yarn link-cli
          echo "$(yarn global bin)" >> $GITHUB_PATH

      - name: build self knowledge base
        env:
          HIDE_LOG4BRAINS_VERSION: "1" # TODO: use lerna to bump the version temporarily here so we don't have to hide it
        run: log4brains build --basePath /${GITHUB_REPOSITORY#*/}/adr

      - name: publish self knowledge base
        uses: JamesIves/github-pages-deploy-action@3.7.1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: .log4brains/out
          TARGET_FOLDER: adr

  # release:
  #   [...]
  #
  # This part is now done manually after this pipeline is successful
  # by running `yarn release`
  # This enables to group multiple successive merges into a single release and to better control the changelog
